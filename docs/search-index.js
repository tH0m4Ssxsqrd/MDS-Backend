var searchIndex = JSON.parse('{\
"actix_server":{"doc":"","t":"DDDLLLLLLMMLLLLLLLLLLLLLLLLLMFLLLLLLMMFMFMFLLMFLLLLLLLLLLLL","n":["PDFdoc","SearchQueryWrapper","SearchResults","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","content","date","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","id","index","init","init","init","into","into","into","is_normative","link","main","q","query_meilisearch","results","search","serialize","serialize","title","transform_results","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"actix_server"],[59,"core::result"],[60,"serde::de"],[61,"core::fmt"],[62,"core::fmt"],[63,"actix_web::error::error"],[64,"std::io::error"],[65,"meilisearch_sdk::client"],[66,"meilisearch_sdk::search"],[67,"actix_web::types::query"],[68,"actix_web::data"],[69,"actix_web::response::response"],[70,"serde::ser"],[71,"core::any"]],"d":["Represents the fields of each object in the database.","Wrapper for the search query.","Wrapper for the search results.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Serves the main webpage.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The entry point of the program. Sets up the Actix-web …","","Performs a Meilisearch query based on the provided query …","","The main search function. Listens for JSON requests with a …","","","","Transforms Meilisearch search results into a custom format …","","","","","","","","","","","",""],"i":[0,0,0,2,5,9,2,5,9,5,5,2,5,9,2,5,9,2,5,2,5,9,2,5,9,2,5,9,5,0,2,5,9,2,5,9,5,5,0,2,0,9,0,5,9,5,0,2,5,9,2,5,9,2,5,9,2,5,9],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[-1,[[3,[2]]],4],[-1,[[3,[5]]],4],[1,6],[1,6],[1,6],[[2,7],8],[[5,7],8],[[9,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],[[3,[10,11]]]],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[12,[6]]]],0,[[13,14],[[3,[[15,[5]],11]]]],0,[[[16,[2]],[17,[14]]],[[3,[18,11]]]],[[5,-1],3,19],[[9,-1],3,19],0,[[[15,[5]]],9],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"usize"],[3,"SearchQueryWrapper",0],[4,"Result",59],[8,"Deserializer",60],[3,"PDFdoc",0],[15,"tuple"],[3,"Formatter",61],[6,"Result",61],[3,"SearchResults",0],[3,"NamedFile",62],[3,"Error",63],[6,"Result",64],[15,"str"],[3,"Client",65],[3,"SearchResults",66],[3,"Query",67],[3,"Data",68],[3,"HttpResponse",69],[8,"Serializer",70],[3,"TypeId",71]]},\
"document_parser":{"doc":"","t":"DDLLLLMFMLLMFFFLLFMLLMMFFFFFLLMLLLLLL","n":["Data","Entry","borrow","borrow","borrow_mut","borrow_mut","content","create_folders_if_not_exist","date","deserialize","deserialize","entries","extract_date","extract_portuguese_date","extract_text","from","from","get_link","id","into","into","is_normative","link","main","prompt_normative","return_date","return_parameters","return_title","serialize","serialize","title","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"document_parser"],[37,"std::io::error"],[38,"core::result"],[39,"serde::de"],[40,"core::option"],[41,"std::path"],[42,"alloc::string"],[43,"core::error"],[44,"alloc::boxed"],[45,"std::collections::hash::set"],[46,"pdf_extract"],[47,"serde::ser"],[48,"core::any"]],"d":["Represents an array of document entries, with macros to …","Represents each document entry, with macros to both read …","","","","","","On program startup checks for the existence of in, old and …","","","","","This function is run if extract_portuguese_date returns …","This function takes a reference to a Line of text and …","This function takes a reference to the path of the file …","Returns the argument unchanged.","Returns the argument unchanged.","This function takes a reference to the path of the file …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The main entry point of the program.","This function takes a reference to a prompt string and …","Receives a reference to a string with the formatted text, …","Receives a string with the Extracted Text, a reference to …","Receives a reference to a string with the formatted text …","","","","","","","","",""],"i":[0,0,4,6,4,6,4,0,4,4,6,6,0,0,0,4,6,0,4,4,6,4,4,0,0,0,0,0,4,6,4,4,6,4,6,4,6],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[3,[1,2]]]],0,[-1,[[3,[4]]],5],[-1,[[3,[6]]],5],0,[7,[[9,[8]]]],[7,[[9,[8]]]],[10,[[3,[11,[13,[12]]]]]],[-1,-1,[]],[-1,-1,[]],[10,[[3,[11,[13,[12]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[3,[1,[13,[12]]]]]],[7,14],[7,[[9,[8]]]],[[7,[15,[7]],[16,[11]]],[[3,[[1,[[9,[11]],[9,[8]],14]],17]]]],[[7,[15,[7]]],[[9,[11]]]],[[4,-1],3,18],[[6,-1],3,18],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,19,[]],[-1,19,[]]],"c":[],"p":[[15,"tuple"],[3,"Error",37],[4,"Result",38],[3,"Entry",0],[8,"Deserializer",39],[3,"Data",0],[15,"str"],[15,"i64"],[4,"Option",40],[3,"Path",41],[3,"String",42],[8,"Error",43],[3,"Box",44],[15,"bool"],[15,"slice"],[3,"HashSet",45],[4,"OutputError",46],[8,"Serializer",47],[3,"TypeId",48]]},\
"webscraper":{"doc":"","t":"F","n":["main"],"q":[[0,"webscraper"]],"d":["Main function to process HTML files in the current …"],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
